#include<iostream>
#include<queue>
using namespace std;
class Node{
	public:
		int key;
		Node* left;
		Node* right;
	Node(int val)
	{
		 key=val;
		 left=NULL;
		 right=NULL;
	}
};
class QueueNode {
public:
    Node* data;
    QueueNode* next;

    QueueNode(Node* node) {
        data = node;
        next = NULL;
    }
};

class Queue {
public:
    QueueNode* front;
    QueueNode* rear;

    Queue() {
        front = rear = NULL;
    }

    bool isEmpty() {
        return front == NULL;
    }

    void enQueue(Node* node) {
        QueueNode* new_Node = new QueueNode(node);

        if (rear == NULL) {
            front = rear = new_Node;
            return;
        }

        rear->next = new_Node;
        rear = new_Node;
    }

    void deQueue() {
        if (isEmpty()) {
            return;
        }

        QueueNode* temp = front;
        front = front->next;

        if (front == NULL) {
            rear = NULL;
        }

        delete temp;
    }

    Node* getFront() {
        if (isEmpty()) {
            return NULL;
        }

        return front->data;
    }
};

class binary_tree{
	public:
	Node* root;
	binary_tree()
	{
	root= NULL;	
	}
	void inOrder(Node* &root)
	{
		if(root!=NULL)
		{
			inOrder(root->left);
			cout<<root->key<<endl;
			inOrder(root->right);
			
		}
	}
	void preOrder(Node* &root)
	{
		if(root!=NULL)
		{
			cout<<root->key<<endl;			
			preOrder(root->left);
			preOrder(root->right);
			
		}
	}	
	void postOrder(Node* &root)
	{
		if(root!=NULL)
		{
			postOrder(root->left);
			postOrder(root->right);
			cout<<root->key<<endl;								
		}
	}
	    void levelOrder(Node* root) {
        if (root == NULL)
            return;

        Queue q;
        q.enQueue(root);

      while (!q.isEmpty()) {
        Node* current = q.getFront();
        cout << current->key << " ";
        q.deQueue();
        cout << "(Dequeued: " << current->key << ") "<<endl;

        if (current->left != NULL) {
            q.enQueue(current->left);
        }
        if (current->right != NULL) {
            q.enQueue(current->right);
        }
         cout << "\n Elements in queue: ";
        Node* remaining = q.getFront();
        while (remaining != NULL) {
            cout << remaining->key << " ";
            remaining = remaining->right;
        }
        cout << endl;
    }

    }
};
		



int main()
{
	binary_tree bt;
	bt.root= new Node(10);
	bt.root->left=new Node(20);
	bt.root->right=new Node(30);
	bt.root->right->left=new Node(40);
	bt.root->right->right=new Node(50);
	cout<<"Inorder"<<endl;
	bt.inOrder(bt.root);
	cout<<"Preorder"<<endl;
	bt.preOrder(bt.root);
	cout<<"Postorder"<<endl;
	bt.postOrder(bt.root);
	cout << "Levelorder" << endl;
    bt.levelOrder(bt.root);
	return 0;
	
	
	
}
